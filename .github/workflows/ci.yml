name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type checking
        run: npm run typecheck

      - name: Run tests
        run: npm test

      # Coverage reporting disabled for now
      # - name: Upload coverage reports
      #   uses: codecov/codecov-action@v4
      #   with:
      #     file: ./coverage/coverage-final.json

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-dist
          path: dist/
          retention-days: 7

  python-build:
    name: Build Python Package
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Node.js dependencies
        run: npm ci

      - name: Build Node.js project
        run: npm run build

      - name: Copy build artifacts to Python package
        run: |
          cp -r dist svg_generator_mcp/
          cp -r node_modules svg_generator_mcp/
          cp package.json svg_generator_mcp/
          cp package-lock.json svg_generator_mcp/

      - name: Install Python build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build Python package
        run: python -m build

      - name: Upload Python package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/
          retention-days: 7

      - name: Publish to PyPI
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m twine upload dist/* --verbose

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: python-build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download Python package
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: dist/

      - name: Install and test package
        run: |
          pip install dist/*.whl
          # Test that the package can be imported and shows help
          timeout 5s svg-generator-mcp --help || echo "Package installed successfully"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate || echo "Security audit warnings found but continuing"

      # Snyk scanning disabled for now (requires token)
      # - name: Run Snyk security scan
      #   uses: snyk/actions/node@master
      #   continue-on-error: true
      #   env:
      #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #   with:
      #     args: --severity-threshold=high

  publish:
    name: Publish Package
    runs-on: ubuntu-latest
    needs: [test, build, integration-test, security-scan]
    if: github.event_name == 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Node.js dependencies
        run: npm ci

      - name: Build Node.js project
        run: npm run build

      - name: Copy build artifacts to Python package
        run: |
          cp -r dist svg_generator_mcp/
          cp -r node_modules svg_generator_mcp/
          cp package.json svg_generator_mcp/
          cp package-lock.json svg_generator_mcp/

      - name: Install Python build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build Python package
        run: python -m build

      - name: Publish to PyPI
        run: twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}

  create-release-artifacts:
    name: Create Release Artifacts
    runs-on: ubuntu-latest
    needs: [test, python-build]
    if: github.event_name == 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Python package
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: dist/

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./dist/svg_generator_mcp-*.whl
          asset_name: svg-generator-mcp-${{ github.event.release.tag_name }}.whl
          asset_content_type: application/octet-stream